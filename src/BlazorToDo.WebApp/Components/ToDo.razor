@inject BlazorToDo.WebApp.Services.IToDoUpdateService _ToDoUpdateService

<div class="input-group input-group-lg mb-3">
  <div class="input-group-prepend">
    <button class="btn btn-outline-secondary" type="button" @onclick="OnDoneClick">
        @if(Item.Done)
        {
            <span class="oi oi-check text-primary" aria-hidden="true"></span>
        } else
        {
            <span class="oi oi-check" aria-hidden="true"></span>
        }
    </button>
  </div>
  <input type="text" class="form-control" aria-label="Text input with checkbox" @oninput="TextChanged" value="@Item.Title" placeholder="Something to do..." />
  <div class="input-group-append">
    @if (ItemUpdating)
    {
        <div class="input-group-text">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Updating...</span>
            </div>
        </div>
    }
    @if(Item.Id != 0)
    {
        <button class="btn btn-danger" type="button" id="button-addon2" title="Remove todo" @onclick="RemoveToDo"><span class="oi oi-x" aria-hidden="true"></span></button>
    }
  </div>
</div>

@functions {

    protected override void OnInit()
    {
        _ToDoUpdateService.OnUpdate += (sender, args) => {
            if(args.Item == Item)
            {
                if(Item.Id == 0)
                    Item.Id = args.Item.Id;
                ItemUpdating = false;
                // Notify the "UI" to refresh
                this.Invoke(() => this.StateHasChanged());
            }
        };

        _ToDoUpdateService.OnCreate += (sender, args) => {
            // TODO: Validate if Wait() is required/recommended
            if(args.Item == Item)
                this.Invoke(() => OnItemCreated.InvokeAsync(args));            
        };

        _ToDoUpdateService.OnRemove += (sender, args) => {
            // TODO: Validate if Wait() is required/recommended
            if(args.Item == Item)
                this.Invoke(() => OnItemRemoved.InvokeAsync(args));            
        };
    }

    [Parameter]
    public ToDoItem Item { get; set; }

    [Parameter]
    private EventCallback<ToDoItemEventArgs> OnItemCreated { get; set; }

    [Parameter]
    private EventCallback<ToDoItemEventArgs> OnItemRemoved { get; set; }

    private bool ItemUpdating = false;

    private void TextChanged(UIChangeEventArgs e)
    {
        Item.Title = e.Value as string;
        _ToDoUpdateService.Enqueue(Item);
        ItemUpdating = true;
    }

    private void OnDoneClick()
    {
        Item.Done = !Item.Done;
        _ToDoUpdateService.Enqueue(Item);
        ItemUpdating = true;
    }

    private void RemoveToDo()
    {
        ItemUpdating = true;
        Item.MarkedForRemoval = true;
        _ToDoUpdateService.Enqueue(Item);
    }
}